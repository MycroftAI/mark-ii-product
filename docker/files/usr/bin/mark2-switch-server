#!/usr/bin/env python3
import argparse
import functools
import logging
import socket
import threading
import time
from pathlib import Path
from queue import Queue
from typing import List

import RPi.GPIO as GPIO

_LOGGER = logging.getLogger("mark2-switch-server")

# sj201Rev4
PINS = {"volume_up": 22, "volume_down": 23, "action": 24, "mute": 25}

DEBOUNCE = 100
WAIT_SEC = 0.05
ACTIVE = 0

SWITCH_ON = "on"
SWITCH_OFF = "off"


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--path",
        default="/tmp/mark2-switch.socket",
        help="Path to socket file",
    )
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)

    args.path = Path(args.path)
    args.path.unlink(missing_ok=True)

    event_queues = []

    event_socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    event_socket.bind(str(args.path))
    event_socket.listen()

    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)

    for name, pin in PINS.items():
        GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.add_event_detect(
            pin,
            GPIO.BOTH,
            callback=functools.partial(handle_event, name, pin, event_queues),
            bouncetime=DEBOUNCE,
        )

    try:
        while True:
            connection, client_address = event_socket.accept()
            threading.Thread(
                target=client_run, args=(connection, event_queues), daemon=True
            ).start()
    except KeyboardInterrupt:
        pass


def client_run(connection, event_queues: List[Queue]):

    with connection, connection.makefile(mode="rw") as conn_file:
        event_queue = Queue()
        event_queues.append(event_queue)

        try:
            while True:
                name, state = event_queue.get()
                print(name, state, file=conn_file, flush=True)
        finally:
            event_queues.remove(event_queue)
            connection.close()


def handle_event(name, pin, event_queues: List[Queue], _channel):
    time.sleep(WAIT_SEC)
    value = GPIO.input(pin)

    for event_queue in event_queues:
        if value == ACTIVE:
            event_queue.put_nowait((name, SWITCH_ON))
        else:
            event_queue.put_nowait((name, SWITCH_OFF))


if __name__ == "__main__":
    main()
