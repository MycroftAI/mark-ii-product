#!/usr/bin/env python3
import asyncio
import argparse
import json
import logging
import socket
import subprocess
import sys
import time
from pathlib import Path

from websockets import connect, WebSocketException

_LOGGER = logging.getLogger("mark2-volume-client")


async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--uri",
        default="ws://127.0.0.1:8181/core",
        help="URI of websocket messagebus",
    )
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO)

    async with connect(args.uri) as websocket:
        while True:
            try:
                if websocket is None:
                    # Reconnect
                    _LOGGER.warning("Reconnecting to %s", args.uri)
                    websocket = await connect(args.uri)

                message_str = await websocket.recv()
                message = json.loads(message_str)
                message_type = message["type"]
                if message_type != "mycroft.switch.state":
                    continue

                message_data = message.get("data", {})
                name = message_data.get("name")
                state = message_data.get("state")

                if (name in {"volume_down", "volume_up"}) and (state == "on"):
                    current_volume = await get_volume()
                    if name == "volume_up":
                        await set_volume(current_volume + 25)
                    else:
                        await set_volume(current_volume - 25)

                    await beep()
            except WebSocketException:
                websocket = None
                _LOGGER.warning("Waiting to reconnect...")
                time.sleep(5)
            except KeyboardInterrupt:
                break


async def get_volume():
    proc = await asyncio.subprocess.create_subprocess_exec(
        "amixer",
        "-c",
        "0",
        "get",
        "Playback",
        stdout=asyncio.subprocess.PIPE,
    )
    stdout, _stderr = await proc.communicate()
    lines = stdout.decode().splitlines()
    for line in lines:
        if line.strip().lower().startswith("front left"):
            return int(line.split()[2])

    return 255


async def set_volume(volume):
    volume = min(255, max(0, volume))
    proc = await asyncio.subprocess.create_subprocess_exec(
        "amixer",
        "-q",
        "-c",
        "0",
        "set",
        "Playback",
        str(volume),
    )
    await proc.communicate()
    print("Set volume to", volume, file=sys.stderr)


async def beep():
    proc = await asyncio.subprocess.create_subprocess_exec(
        "aplay", "-q", "/etc/mycroft/beep.wav"
    )
    await proc.communicate()


if __name__ == "__main__":
    asyncio.run(main())
